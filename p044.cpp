/*
Project Euler Problem 44
Kevin Kuehler
https://github.com/kevinkuehler/Project-Euler

******************************************************************************************************************

Prompt:
Pentagonal numbers are generated by the formula, P(n)=n(3n−1)/2. The first ten pentagonal numbers are:

                                1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and difference are pentagonal and
D = |P(k) − P(j)| is minimised; what is the value of D?
*/
#include <iostream>
#include <math.h>
using namespace std;
int gen_pentagon(unsigned int);
bool is_pent(unsigned int);
int main() {

    /*
    * We are looking for the minimum value of D, where D=|P(k)-P(j)|. By starting i and j
    * at the lowest indices for calculating pentagonal numbers (i=2 produces 5 and j=1 produces 1),
    * we know the first pentagonal number that is both the sum and difference of the pentagonal
    * numbers produced by i and j is the minimum value.
    *
    * NOTE (inner-loop): Instead of starting j at 1 and looping while j < i, it is more
    * efficient to start j at i-1 and loop while j > 0, because a larger j means a smaller
    * difference, so we can safely break out of the entire loop once the if-statement passes.
    * On the other hand, if we chose the former method, we would have to complete the entire
    * inner-loop after finding a minimum in case there is another value of j that produces a minimum.
    */
    int D = 0;
    for(int i = 2; !D; i++) {
        for(int j = i-1; j > 0; j--) {
            int x = gen_pentagon(i), y = gen_pentagon(j);
            if(is_pent(y+x) && is_pent(abs(y-x))) {
                D = abs(y-x);
                break;
            }
        }
    }
    cout << D << endl;
    return 0;
}

/*
Formula for generating pentagonal numbers using an index n.
*/
int gen_pentagon(unsigned int n) {
    return n*(3*n-1)/2;
}

/*
Checks if sqrt(1+24x) is an integer and if (1+sqrt(1+24x))/6 is an integer.
Both of these conditions must be true for a number x to be pentagonal.
These conditions come from plugging in pentagonal formula to the quadratic formula.
*/
bool is_pent(unsigned int x) {
    double c = sqrt(1+24*x);
    return floor(c) == c ? (1+(int)c) % 6 == 0: false;
}
