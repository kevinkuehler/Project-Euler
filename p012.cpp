/*
Project Euler Problem 12
Kevin Kuehler
https://github.com/kevinkuehler/Project-Euler

*****************************************************************************
Prompt:
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be :
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers :

1  : 1
3  : 1, 3
6  : 1, 2, 3, 6
10 : 1, 2, 5, 10
15 : 1, 3, 5, 15
21 : 1, 3, 7, 21
28 : 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors ?
*/
#include <iostream>
#include <string>

using namespace std;

#define FACTORS 500

/*
Sieve of Eratosthenes.
Returns boolean array where all primes are set to true.
*/
bool* sieveEratosthenes(unsigned int sievelen) {
	bool* primearr = new bool[sievelen + 1];
	memset(primearr, true, sizeof(bool) * sievelen);

	for (auto i = 2; i*i < sievelen; i++) {
		if (primearr[i]) {
			for (auto j = i*i; j <= sievelen; j += i)
				primearr[j] = false;
		}
	}

	return primearr;
}

/*
Generates the nth triangular number
*/
unsigned int genTriangular(unsigned int n) {
	return n*(n + 1) / 2;
}

/*
 Gets prime factors of a number using 
 sieve. Uses the fact that a number with primes x,y,z
 raised to the powers n,m, and p respectively (x^n*y^m*z^p)
 will have (n + 1)(m + 1)(p + 1) factors.
*/
unsigned int getFactors(unsigned int n, bool* sieve) {
	int divisors = 1; // set to 1 for multiplication
	for (auto i = 2; n > 1; i++) {
		if (sieve[i]) {
			unsigned int occurance = 0; // amount of times a prime number has occured
			while (!(n % i)) { // while n is evenly divisible by primes
				n /= i;	 // divide n by primes
				occurance++;
			}
			if (occurance) divisors *= (occurance+1); // if occurance is DNE 0 we know there are primes
		}
	}
	
	return divisors;
}


int main()
{
	auto sieve = sieveEratosthenes(20000);
	auto i = 1;
	while (getFactors(genTriangular(i), sieve) <= FACTORS) i++;
	cout << genTriangular(i) << endl;

	delete[] sieve;
	return 0;
	
}