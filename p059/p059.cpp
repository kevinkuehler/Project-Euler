/*
* Project Euler Problem 59 => https://projecteuler.net/problem=59
* Kevin Kuehler
* https://github.com/kevinkuehler/Project-Euler
*/
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>
#define KEYLEN 3

using namespace std;

// Returns the key in an unordered map with the largest value.
template<typename key, typename value>
value max_key_umap(unordered_map<key,value> & m) {
    return max_element(m.begin(), m.end(),
    [](const pair<key,value>& p1, const pair<key,value>& p2) {
        return p1.second < p2.second; })->first;
}

// Returns true if a character is lowercase.
inline bool isalphalower(char c) {
    return c > 96 && c < 123;
}

int main() {
    /* Reads file into vector */
    ifstream file;
    file.open("p059_cipher.txt");
    string c;
    vector<char> cipher;
    while(getline(file,c,','))
        cipher.push_back(stoi(c));

    int size = cipher.size();

    /*
    * Creates a frequency table for each character in the key.
    * Possible key parts are generated by performing an xor on common
    * English characters. Filters for only lowercase characters.
    */
    char common[13] = {'e', 't', 'a', 'o', 'i', 'n', ' ', 's', 'h', 'r', 'd', 'l', 'u'};
    unordered_map<char,int> freq[KEYLEN];
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < 13; j++) {
            char t = cipher[i] ^ common[j];
            if(isalphalower(t))
                freq[i%KEYLEN][t]++;
        }
    }

    /*
    * The max key in each frequency table is used as part of the key.
    * Using our key we decrypt the message and sum the ascii values.
    */
    char key[KEYLEN];
    for(int i = 0; i < KEYLEN; i++)
        key[i] = (char) max_key_umap(freq[i]);

    int sum = 0;
    for(int i = 0; i < size; i++)
        sum += key[i%KEYLEN] ^ cipher[i];

    cout << sum << endl;
    return 0;
}




