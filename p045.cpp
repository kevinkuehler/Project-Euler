/*
Project Euler Problem 45
Kevin Kuehler
https://github.com/kevinkuehler/Project-Euler

************************************************************************************

Prompt:
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	T(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P(n)=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	H(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/
#include <iostream>
#include <math.h>
using namespace std;
bool is_pent(unsigned long);
unsigned long gen_hex(unsigned long);
int main() {
    /*
    * We find our start index of 144 by using the fact that an index n of a
    * hexagonal number is given by n=( 1+sqrt(1+8h) ) / 4 for any value of h
    * that returns an integer. We plug in 40755 and get index 143.
    * We only check for hexagonal numbers that are also pentagonal since
    * every hexagonal number is an odd-numbered triangular number.
    */
    int i = 144;
    unsigned long hex;
    while( !is_pent(hex=gen_hex(i++) )) {}
    cout << hex << endl;
    return 0;
}

/*
Formula for generating hexagonal numbers using an index n.
*/
unsigned long gen_hex(unsigned long n) {
    return n*(2*n-1);
}

/*
Checks if (1+sqrt(1+24x))/6 is an integer. This condition must be
true for a number x to be pentagonal (comes from quadratic formula).
*/
bool is_pent(unsigned long x) {
    double c = sqrt(double(1+24*x));
    return floor(c) == c ? (1+(unsigned long)c) % 6 == 0: false;
}



